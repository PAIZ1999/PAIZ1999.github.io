// 读取 downloadSRT.js
const fetchDownloadSRTScript = async () => {
  const response = await fetch('https://PAIZ1999.github.io/downloadSRT.js');
  const scriptText = await response.text();
  return scriptText;
};

// 模拟滚动页面
const scrollToBottom = async () => {
  return new Promise((resolve) => {
    const interval = setInterval(() => {
      window.scrollTo(0, document.body.scrollHeight);
      if (document.documentElement.scrollHeight - document.documentElement.scrollTop === document.documentElement.clientHeight) {
        clearInterval(interval);
        resolve();
      }
    }, 500); // 每500毫秒滚动一次
  });
};

// 处理一批窗口
const processBatch = async (urls, scriptText) => {
  const windows = [];

  for (const url of urls) {
    const noFocusUrl = url + '#no_focus';
    const newWindow = window.open(noFocusUrl, '_blank');
    windows.push(newWindow);

    newWindow.addEventListener('load', () => {
      setTimeout(() => {
        const script = newWindow.document.createElement('script');
        script.textContent = scriptText;
        newWindow.document.head.appendChild(script);
        newWindow.postMessage('downloadSRT', '*');
      }, 2000);
    });
  }

  return new Promise((resolve) => {
    let closedCount = 0;
    const messageListener = (event) => {
      if (event.data === 'SRTDownloaded') {
        const winIndex = windows.findIndex(win => win === event.source);
        if (winIndex !== -1) {
          windows[winIndex].close();
          windows.splice(winIndex, 1);
          closedCount++;
        }
      }
      if (closedCount === urls.length) {
        window.removeEventListener('message', messageListener);
        resolve();
      }
    };

    window.addEventListener('message', messageListener);
  });
};

// 调用函数
(async () => {
  const scriptText = await fetchDownloadSRTScript();
  await scrollToBottom(); // 确保滚动功能被执行
  
  const meetingListItems = document.querySelectorAll('a.meeting-list-item-me');
  const meetingUrls = Array.from(meetingListItems).map(item => item.getAttribute('href'));

  const batchSize = 20;
  for (let i = 0; i < meetingUrls.length; i += batchSize) {
    const batchUrls = meetingUrls.slice(i, i + batchSize);
    await processBatch(batchUrls, scriptText);
  }
})();
